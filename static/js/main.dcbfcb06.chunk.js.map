{"version":3,"sources":["components/common/Loading.tsx","components/common/Spinner.tsx","components/todo/TodoService.tsx","components/todo/template/TodoTemplate.tsx","components/todo/template/head/TodoHead.tsx","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","utils/constants.ts","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","App.tsx","index.js"],"names":["Loading","props","LoadingOutlined","style","fontSize","size","spin","Spinner","tip","delay","mask","StyledSpinnerWrapper","className","justify","align","indicator","defaultProps","styled","Row","styleProps","initialTodos","TodoTemplate","TodoTemplateBlock","children","div","React","memo","TodoHead","currentDate","moment","format","dayString","dateString","TodoHeadBlock","DayText","DateText","TodoItem","toggleTodo","removeTodo","todo","useState","isModalVisible","setIsModalVisible","TodoItemBlock","CheckCircle","done","onClick","id","CheckOutlined","Text","text","DueDate","dueDate","Remove","DeleteOutlined","visible","onOk","onCancel","okText","cancelText","okButtonProps","danger","centered","width","bodyStyle","textAlign","css","TodoList","todos","TodoListBlock","map","ALERT_MESSAGE","TodoCreate","nextId","createTodo","incrementNextId","open","setOpen","value","setValue","dueDateValue","setDueDateValue","alertMessage","setAlertMessage","handleModalOk","InsertFormPositioner","InsertForm","onSubmit","e","preventDefault","replace","Input","autoFocus","placeholder","onChange","target","date","disabledDate","current","endOf","subtract","CircleButton","PlusCircleOutlined","cancelButtonProps","display","button","form","input","Todofooter","undoneTasks","filter","TodoFooterBlock","LeftText","length","TodoContainer","todoState","setTodoState","nextIdState","useEffect","loadData","saveData","data","localStorage","getItem","JSON","parse","setItem","stringify","prevState","todoLength","concat","useTodo","TodoFooter","App","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcbfcb06.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { SpinSize } from \"antd/lib/spin\";\r\n\r\ninterface ILoadingProps {\r\n  size?: SpinSize;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport default function Loading(props: ILoadingProps): ReactElement {\r\n  return (\r\n    <LoadingOutlined style={{ fontSize: props.size === \"large\" ? 48 : 24, ...props.style }} spin />\r\n  );\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Spin, Row, Col } from \"antd\";\r\nimport { SpinSize } from \"antd/lib/spin\";\r\n\r\nimport Loading from \"./Loading\";\r\n\r\ninterface ISpinnerProps {\r\n  tip?: string;\r\n  size?: SpinSize;\r\n  delay?: number;\r\n  style?: React.CSSProperties;\r\n  mask?: boolean;\r\n}\r\n\r\ninterface IWrapperProp {\r\n  readonly [\"data-mask\"]: boolean;\r\n}\r\n\r\nfunction Spinner(props: ISpinnerProps): ReactElement {\r\n  const { tip, size, delay, style, mask = false } = props;\r\n\r\n  return (\r\n    <StyledSpinnerWrapper\r\n      className=\"spinner-wrap\"\r\n      justify=\"center\"\r\n      align=\"middle\"\r\n      style={style}\r\n      data-mask={mask}>\r\n      <Col>\r\n        <Spin indicator={<Loading size={size} />} delay={delay} tip={tip} size={size} />\r\n      </Col>\r\n    </StyledSpinnerWrapper>\r\n  );\r\n}\r\n\r\nSpinner.defaultProps = {\r\n  tip: \"로딩중입니다.\",\r\n  size: \"large\",\r\n  delay: 0,\r\n  style: {},\r\n  mask: false,\r\n};\r\n\r\nconst StyledSpinnerWrapper = styled(Row)<IWrapperProp>`\r\n  background-color: ${(styleProps) =>\r\n    styleProps[\"data-mask\"] ? \"rgba(0, 0, 0, 0.1)\" : \"transparent\"};\r\n`;\r\n\r\nexport default Spinner;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport type Itodo = {\r\n  id: number;\r\n  text: string;\r\n  done: boolean;\r\n  dueDate: string;\r\n};\r\n\r\nlet initialTodos: Itodo[] = [];\r\n\r\nexport const useTodo = () => {\r\n  const [todoState, setTodoState] = useState(initialTodos);\r\n  let nextIdState = 0;\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    saveData();\r\n  }, [todoState]);\r\n\r\n  const incrementNextId = () => {\r\n    nextIdState = nextIdState + 1;\r\n  };\r\n\r\n  const toggleTodo = (id: number) => {\r\n    //@TODO\r\n    setTodoState((prevState) =>\r\n      prevState.map((todo: Itodo) => (todo.id === id ? { ...todo, done: !todo.done } : todo))\r\n    );\r\n  };\r\n\r\n  const removeTodo = (id: number) => {\r\n    setTodoState((prevState) => prevState.filter((todo: Itodo) => todo.id !== id));\r\n  };\r\n\r\n  const createTodo = (todo: Itodo) => {\r\n    const todoLength = todoState.length;\r\n    const nextId = !!todoLength ? todoState[todoLength - 1].id + 1 : 1;\r\n\r\n    setTodoState((prevState) =>\r\n      prevState.concat({\r\n        ...todo,\r\n        id: nextId,\r\n      })\r\n    );\r\n  };\r\n\r\n  const loadData = () => {\r\n    const data = localStorage.getItem(\"todos\") || \"[]\";\r\n    initialTodos = JSON.parse(data);\r\n    if (initialTodos && initialTodos.length >= 1) {\r\n      incrementNextId();\r\n    }\r\n    setTodoState(initialTodos);\r\n  };\r\n\r\n  const saveData = () => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todoState));\r\n  };\r\n\r\n  return {\r\n    todoState,\r\n    nextIdState,\r\n    incrementNextId,\r\n    toggleTodo,\r\n    removeTodo,\r\n    createTodo,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction TodoTemplate(props: any) {\r\n  return <TodoTemplateBlock>{props.children}</TodoTemplateBlock>;\r\n}\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 70%;\r\n  height: 800px;\r\n\r\n  min-width: 360px;\r\n  max-width: 700px;\r\n\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 30px;\r\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\r\n\r\n  margin: 0 auto;\r\n\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport default React.memo(TodoTemplate);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\n\r\nconst TodoHead = () => {\r\n  //@TODO 현재 시간을 표시해야합니다.\r\n  const currentDate = moment().format(\"LL\");\r\n  const dayOfWeek = moment().format(\"dddd\");\r\n\r\n  const dayString = dayOfWeek;\r\n  const dateString = currentDate;\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <DayText>{dayString}</DayText>\r\n      <DateText>{dateString}</DateText>\r\n    </TodoHeadBlock>\r\n  );\r\n};\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 52px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 3px solid #33bb77;\r\n`;\r\n\r\nconst DateText = styled.div`\r\n  font-size: 26px;\r\n  color: #119955;\r\n  padding-left: 10px;\r\n`;\r\n\r\nconst DayText = styled.div`\r\n  font-size: 22px;\r\n  color: #119955;\r\n  padding-top: 5px;\r\n`;\r\n\r\nexport default React.memo(TodoHead);\r\n","import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Modal } from \"antd\";\r\nimport { CheckOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Itodo } from \"components/todo/TodoService\";\r\n\r\ninterface TodoItemProps {\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n  todo: Itodo;\r\n}\r\n\r\nconst TodoItem = ({ toggleTodo, removeTodo, todo }: TodoItemProps) => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const handleToggle = () => {\r\n    return toggleTodo(todo.id);\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    !todo.done ? setIsModalVisible(true) : removeTodo(todo.id);\r\n  };\r\n\r\n  const handleModalOk = () => {\r\n    removeTodo(todo.id);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleModalCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle done={todo.done} onClick={handleToggle}>\r\n        {todo.done && <CheckOutlined />}\r\n      </CheckCircle>\r\n      <Text done={todo.done}>{todo.text}</Text>\r\n      <DueDate done={todo.done}>\r\n        완료 목표일\r\n        <br />\r\n        {todo.dueDate}\r\n      </DueDate>\r\n      <Remove onClick={handleRemove}>\r\n        <DeleteOutlined />\r\n      </Remove>\r\n      <Modal\r\n        visible={isModalVisible}\r\n        onOk={handleModalOk}\r\n        onCancel={handleModalCancel}\r\n        okText=\"삭제\"\r\n        cancelText=\"취소\"\r\n        okButtonProps={{ danger: true }}\r\n        centered={true}\r\n        width=\"300px\"\r\n        bodyStyle={{ textAlign: \"center\" }}>\r\n        <span>\r\n          아직 완료하지 않은 항목입니다! <br />\r\n          그래도 삭제하시겠습니까?\r\n        </span>\r\n      </Modal>\r\n    </TodoItemBlock>\r\n  );\r\n};\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #119955;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  &:hover {\r\n    ${Remove} {\r\n      display: initial;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div<{ done: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 16px;\r\n  border: 1px solid #33bb77;\r\n  font-size: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #dddddd;\r\n      color: #dddddd;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div<{ done: boolean }>`\r\n  flex: 1;\r\n  font-size: 16px;\r\n  color: #119955;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nconst DueDate = styled.div<{ done: boolean }>`\r\n  margin: 0 20px;\r\n  text-align: center;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n      text-decoration: line-through;\r\n    `};\r\n`;\r\n\r\nexport default React.memo(TodoItem);\r\n","import { Itodo } from \"components/todo/TodoService\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TodoItem from \"./item/TodoItem\";\r\n\r\ninterface TodoListProps {\r\n  todos: Itodo[];\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n}\r\n\r\nconst TodoList = ({ toggleTodo, removeTodo, todos }: TodoListProps) => {\r\n  return (\r\n    <TodoListBlock>\r\n      {todos &&\r\n        todos.map((todo) => (\r\n          <TodoItem toggleTodo={toggleTodo} removeTodo={removeTodo} key={todo.id} todo={todo} />\r\n        ))}\r\n    </TodoListBlock>\r\n  );\r\n};\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport default React.memo(TodoList);\r\n","export const ALERT_MESSAGE = {\r\n  INPUT_NULL: \"해야 할 일을 입력해주세요.\",\r\n  INPUT_SPACE: \"공백만 입력되었습니다.\",\r\n  DATE_NULL: \"목표일을 설정해주세요.\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nimport { DatePicker, Modal } from \"antd\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\nimport { Itodo } from \"components/todo/TodoService\";\r\nimport { ALERT_MESSAGE } from \"utils/constants\";\r\n\r\ninterface TodoCreateProps {\r\n  nextId: number;\r\n  createTodo: (todo: Itodo) => void;\r\n  incrementNextId: () => void;\r\n}\r\n\r\nconst TodoCreate = ({ nextId, createTodo, incrementNextId }: TodoCreateProps) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  const [dueDateValue, setDueDateValue] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n  const disabledDate = (current: any) => {\r\n    return current && current < moment().endOf(\"day\").subtract(1, \"d\");\r\n  };\r\n\r\n  const handleDate = (date: any, dateString: any) => {\r\n    setDueDateValue(dateString);\r\n  };\r\n  const handleToggle = () => setOpen(!open);\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault(); // 새로고침 방지\r\n\r\n    if (!value) {\r\n      setAlertMessage(ALERT_MESSAGE.INPUT_NULL);\r\n      return setIsModalVisible(true);\r\n    }\r\n\r\n    const blankSpace = /^\\s+|\\s+$/g;\r\n    if (value.replace(blankSpace, \"\") === \"\") {\r\n      setAlertMessage(ALERT_MESSAGE.INPUT_SPACE);\r\n      return setIsModalVisible(true);\r\n    }\r\n\r\n    if (!dueDateValue) {\r\n      setAlertMessage(ALERT_MESSAGE.DATE_NULL);\r\n      return setIsModalVisible(true);\r\n    }\r\n\r\n    createTodo({\r\n      id: nextId,\r\n      text: value,\r\n      done: false,\r\n      dueDate: dueDateValue,\r\n    });\r\n    incrementNextId(); // nextId 하나 증가\r\n\r\n    setValue(\"\"); // input 초기화\r\n    setOpen(false); // open 닫기\r\n  };\r\n\r\n  const handleModalOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InsertFormPositioner>\r\n        <InsertForm onSubmit={handleSubmit}>\r\n          <Input\r\n            autoFocus\r\n            placeholder=\"해야 할 일을 적어주세요 ✍\"\r\n            onChange={handleChange}\r\n            value={value}\r\n          />\r\n          <DatePicker\r\n            onChange={handleDate}\r\n            disabledDate={disabledDate}\r\n            placeholder=\"목표일 설정 🙌\"\r\n          />\r\n          <CircleButton onClick={handleToggle} open={open}>\r\n            <PlusCircleOutlined />\r\n          </CircleButton>\r\n          <Modal\r\n            visible={isModalVisible}\r\n            onOk={handleModalOk}\r\n            onCancel={handleModalOk}\r\n            cancelButtonProps={{ style: { display: \"none\" } }}\r\n            okText=\"확인\"\r\n            centered={true}\r\n            width=\"300px\"\r\n            bodyStyle={{ textAlign: \"center\" }}>\r\n            <span>{alertMessage}</span>\r\n          </Modal>\r\n        </InsertForm>\r\n      </InsertFormPositioner>\r\n    </>\r\n  );\r\n};\r\n\r\nconst CircleButton = styled.button<{ open: boolean }>`\r\n  background: #33bb77;\r\n  width: 50px;\r\n  height: 50px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 60px;\r\n  left: 50%;\r\n  transform: translate(50%, 0%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  border-bottom: 1px solid #eeeeee;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  background: #eeeeee;\r\n  padding-left: 40px;\r\n  padding-top: 36px;\r\n  padding-right: 60px;\r\n  padding-bottom: 36px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  margin-right: 20px;\r\n  padding: 12px;\r\n  border: 1px solid #dddddd;\r\n  width: 70%;\r\n  outline: none;\r\n  font-size: 21px;\r\n  box-sizing: border-box;\r\n  color: #119955;\r\n  &::placeholder {\r\n    color: #dddddd;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nexport default React.memo(TodoCreate);\r\n","import { Itodo } from \"components/todo/TodoService\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface HooksTodoHeadProps {\r\n  todos: Itodo[];\r\n}\r\n\r\nconst Todofooter = ({ todos }: HooksTodoHeadProps) => {\r\n  const undoneTasks = todos.filter((todo) => !todo.done);\r\n  return (\r\n    <TodoFooterBlock>\r\n      <LeftText className=\"tasks-left\">{undoneTasks.length} items left</LeftText>\r\n    </TodoFooterBlock>\r\n  );\r\n};\r\n\r\nconst TodoFooterBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-top: 24px;\r\n  padding-bottom: 24px;\r\n`;\r\n\r\nconst LeftText = styled.div`\r\n  color: #33bb77;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport default React.memo(Todofooter);\r\n","import React from \"react\";\r\nimport { useTodo } from \"./TodoService\";\r\nimport TodoTemplate from \"./template/TodoTemplate\";\r\nimport TodoHead from \"./template/head/TodoHead\";\r\nimport TodoList from \"./template/list/TodoList\";\r\nimport TodoCreate from \"./template/create/TodoCreate\";\r\nimport TodoFooter from \"./template/footer/TodoFooter\";\r\n\r\nconst TodoContainer = () => {\r\n  const { todoState, nextIdState, incrementNextId, toggleTodo, removeTodo, createTodo } = useTodo();\r\n\r\n  return (\r\n    <>\r\n      <TodoTemplate>\r\n        <TodoHead />\r\n        <TodoCreate\r\n          nextId={nextIdState}\r\n          createTodo={createTodo}\r\n          incrementNextId={incrementNextId}\r\n        />\r\n        <TodoList toggleTodo={toggleTodo} removeTodo={removeTodo} todos={todoState} />\r\n        <TodoFooter todos={todoState} />\r\n      </TodoTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport Spinner from \"./components/common/Spinner\";\r\nimport TodoContainer from \"./components/todo/TodoContainer\";\r\n\r\nfunction App() {\r\n  //@TODO login\r\n  let isLogged = true;\r\n\r\n  const RenderLayout = (\r\n    <div>\r\n      <TodoContainer />\r\n    </div>\r\n  );\r\n\r\n  return isLogged ? RenderLayout : <Spinner mask />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport App from \"./App\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: #eeeeee;\r\n  }\r\n`;\r\n\r\nReactDOM.render(\r\n  <>\r\n    <GlobalStyle />\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}